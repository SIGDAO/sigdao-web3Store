/** Original Contract Data
 at: "347549679294837383"
 atRS: "BURST-QWN9-LY64-M5VL-2YPNB"
 atVersion: 1
 balanceNQT: "430000000"
 creationBlock: 110911
 creator: "2402520554221019656"
 creatorRS: "BURST-QAJA-QW5Y-SWVP-4RVP4"
 dead: false
 description: "Echo, created with BlockTalk"
 finished: true
 frozen: true
 machineCode: "010e0000000f000000000000003033040303000000350001040000001e04000000072835070303000000320a0335040106000000350603050000003209033504010a0000000107000000d241f78359ea91c307070000000a0000001e07000000253505010f0000003506011000000035070112000000128a0000001a0e00000012f30000001a0e00000002080000000e0000000e07000000080000001007000000110000000002080000000e00000004080000000e07000000080000001007000000110100000002080000000e0000000408000000040800000004080000000e070000000800000010070000001102000000133310010400000032090335040107000000100700000035050107000000100700000035060107000000100700000035070107000000100700000033100104000000320a03350401070000001007000000110700000033160107000000110700000033130107000000110700000033120107000000110700000033110107000000110700000033100107000000320504130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
 machineData: "0100000000000000d2040000000000000822eb07b777572101000000fbb30100000000000000000000000000000000000822eb07b77757210822eb07b777572112000000000000000000000000000000d241f78359ea91c30000000000000000000000000000000000000000000000000f000000000000000100000000000000d20400000000000000000000000000000822eb07bbeb07b7775721"
 minActivation: "2000000000"
 name: "ArgTests"
 nextBlock: 111612
 prevBalanceNQT: "430000000"
 requestProcessingTime: 2
 running: false
 stopped: false
 */

import MagicMapper from 'magic-mapper'
import {ContractDataView} from '@burstjs/contracts'

const mapper = new MagicMapper({ exclusive: true })

const mappingSchema = {
    at: MagicMapper.Direct,
    creator: MagicMapper.Direct,
    machineData: MagicMapper.Direct,
    description: MagicMapper.Direct,
    creationBlock: MagicMapper.Direct,
}

const infoMappingSchema = {
    name: MagicMapper.Direct,
    desc: MagicMapper.Direct,
    img: MagicMapper.Direct,
    repo: MagicMapper.Direct,
    tags: MagicMapper.Direct,
}

const ContractDataIndices = {
    Donated: 0,
    DonationCount: 1,
    Active: 2,
    Owner: 3
}

function parseMachineData(contract) {
    const view = new ContractDataView(contract)
    const isActive = parseInt(view.getVariableAsDecimal(ContractDataIndices.Active)) === 1
    const donationPlanck = view.getVariableAsDecimal(ContractDataIndices.Donated)
    const donationCount = view.getVariableAsDecimal(ContractDataIndices.DonationCount)
    const owner = view.getVariableAsDecimal(ContractDataIndices.Owner)
    return {
        isActive,
        donationPlanck,
        donationCount,
        owner
    }
}

export class ApplicationToken {
    constructor(data) {
        Object.keys(data).forEach(k => this[k] = data[k])
    }

    static schema() {
        return 'at, creator, owner, name, creationBlock, donation, donationCount'
    }

    static mapFromContract(contract) {
        const data = mapper.map(contract, mappingSchema)
        try {
            const info = mapper.map(JSON.parse(data.description), infoMappingSchema)
            const state = parseMachineData(contract)
            delete data.description
            delete data.machineData
            return new ApplicationToken({ ...data, ...info, ...state})
        } catch (e) {
            return null // ignore unreadable contract
        }
    }
}
